@page "/CreateAccount"
@using System.ComponentModel.DataAnnotations
@using MinBankApp.Services
@using MinBankApp.Models
@using MinBankApp.Domain
@inject IAccountService AccountService

<h3>Hantera konto</h3>
@if(_accounts.Count == 0)
{
    <!-- Visa formulär för att skapa nytt konto om inga konton finns -->
    <EditForm Model="_formModel" OnValidSubmit="CreateAccountAsync" FormName="CreateAccountForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- kontonamn -->
        <div class="mb-3" style="max-width:400px;">
            <label for="accountName" class="form-label">Kontonamn</label>
            <InputText id="accountName" class="form-control" style="max-width:100%;" @bind-Value="_formModel.Name" />
        </div>

        <!-- välj kontotyp -->
        <div class="mb-3" style="max-width:400px;">
            <label for="accountType" class="form-label">Kontotyp</label>
            <InputSelect id="accountType" class="form-select" style="max-width:100%;" @bind-Value="_formModel.Type">
                <option value="@AccountType.None">Välj kontotyp</option>
                <option value="@AccountType.Uttag">Privatkonto</option>
                <option value="@AccountType.Spara">Sparkonto</option>
            </InputSelect>
        </div>
        <!-- välj valuta -->
        <div class="mb-3" style="max-width:400px;">
            <label for="currencyType" class="form-label">Valuta</label>
            <InputSelect id="currencyType" class="form-select" style="max-width:100%;" @bind-Value="_formModel.Currency">
                <option value="@CurrencyType.None">Välj valuta</option>
                @foreach (var currency in Enum.GetValues<CurrencyType>())
                {
                    if (currency != CurrencyType.None)
                    {
                        <option value="@currency">@currency</option>
                    }
                }
            </InputSelect>
        </div>
        <!-- start saldo -->
        <div class="mb-3" style="max-width:400px;">
            <label for="initialBalance" class="form-label">Start saldo</label>
            <InputNumber id="initialBalance" class="form-control" style="max-width:100%;" @bind-Value="_formModel.InitialBalance" />
        </div>
        <button type="submit" class="btn btn-success w-100" style="max-width:400px;">Skapa</button>
    </EditForm>
}
else
{
    <!-- Hantera befintliga konton -->
    <div class="mb-3" style="max-width:400px;">
        <label for="accountSelect" class="form-label">Välj konto</label>
        <InputSelect id="accountSelect" class="form-select" style="max-width:100%;" @bind-Value="_selectedAccountIdString">
            <option value="">Skapa nytt konto</option>
            @foreach(var account in _accounts)
            {
                <option value="@account.Id.ToString()">@account.Name (@GetAccountTypeName(account.AccountType)) – @account.Currency</option>
            }
        </InputSelect>
    </div>
    @if(string.IsNullOrEmpty(_selectedAccountIdString))
    {
        <!-- Visa formulär för att skapa nytt konto -->
        <EditForm Model="_formModel" OnValidSubmit="CreateAccountAsync" FormName="CreateAccountForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3" style="max-width:400px;">
                <label for="accountName" class="form-label">Kontonamn</label>
                <InputText id="accountName" class="form-control" style="max-width:100%;" @bind-Value="_formModel.Name" />
            </div>
            <div class="mb-3" style="max-width:400px;">
                <label for="accountType" class="form-label">Kontotyp</label>
                <InputSelect id="accountType" class="form-select" style="max-width:100%;" @bind-Value="_formModel.Type">
                    <option value="@AccountType.None">Välj kontotyp</option>
                    <option value="@AccountType.Uttag">Privatkonto</option>
                    <option value="@AccountType.Spara">Sparkonto</option>
                </InputSelect>
            </div>
            <div class="mb-3" style="max-width:400px;">
                <label for="currencyType" class="form-label">Valuta</label>
                <InputSelect id="currencyType" class="form-select" style="max-width:100%;" @bind-Value="_formModel.Currency">
                    <option value="@CurrencyType.None">Välj valuta</option>
                    @foreach (var currency in Enum.GetValues<CurrencyType>())
                    {
                        if (currency != CurrencyType.None)
                        {
                            <option value="@currency">@currency</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="mb-3" style="max-width:400px;">
                <label for="initialBalance" class="form-label">Start saldo</label>
                <InputNumber id="initialBalance" class="form-control" style="max-width:100%;" @bind-Value="_formModel.InitialBalance" />
            </div>
            <button type="submit" class="btn btn-success w-100" style="max-width:400px;">Skapa</button>
        </EditForm>
    }
    else if(selectedAccount != null)
    {
        <!-- Visa saldo och insättning/uttag -->
        <div class="mb-3" style="max-width:400px;">
            <label class="form-label">Saldo: </label>
            <span class="fw-bold">@selectedAccount.Balance @selectedAccount.Currency</span>
        </div>
        <EditForm Model="_transactionModel" OnValidSubmit="HandleTransactionAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3" style="max-width:400px;">
                <label for="amount" class="form-label">Belopp</label>
                <InputNumber id="amount" class="form-control" style="max-width:100%;" @bind-Value="_transactionModel.Amount" />
            </div>
            <div class="mb-3" style="max-width:400px;">
                <label class="form-label">Typ av transaktion</label>
                <InputSelect class="form-select" style="max-width:100%;" @bind-Value="_transactionModel.Type">
                    <option value="Deposit">Sätt in</option>
                    <option value="Withdraw">Ta ut</option>
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary w-100" style="max-width:400px;">Utför</button>
        </EditForm>
    }
}
<br>

<!-- Kontolista -->
<h4>Alla konton</h4>
<div class="account-list-container mb-4">
    @if(_accounts.Count == 0)
    {
        <p>Det finns inga konton ännu, registera ditt första konto!</p>
    }
    else
    {
        <!-- tabell på konton -->
        <div style="max-width: 800px; overflow-x: auto;">
            <table class="table table-striped table-bordered align-middle" style="max-width: 100%;">
                <thead>
                <tr>
                    <th style="min-width:120px;">Namn</th>
                    <th style="min-width:120px;">Typ</th>
                    <th style="min-width:100px;">Saldo</th>
                    <th style="min-width:100px;">Valuta</th>
                    <th style="min-width:160px;">Senast uppdaterad</th>
                    <th style="min-width:90px;">Åtgärd</th>
                </tr>
                </thead>
                <tbody>
                @foreach(var account in _accounts)
                {
                    <tr>
                        <td>@account.Name</td>
                        <td>@GetAccountTypeName(account.AccountType)</td>
                        <td>@account.Balance</td>
                        <td>@account.Currency</td>
                        <td>@account.LastUpdated.ToLocalTime()</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteAccountAsync(account.Id)">Radera</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
</div>

<footer class="footer">
    <p>© 2025 MinBankApp. All rights reserved.</p>
</footer>

@code {
    private CreateAccountFormModel _formModel = new() { Type = AccountType.None, Currency = CurrencyType.None };
    private List<IBankAccount> _accounts = new();
    private TransactionFormModel _transactionModel = new();

    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccounts();
    }

    private async Task CreateAccountAsync()
    {
        try
        {
            await AccountService.CreateAccount(
                _formModel.Name,
                _formModel.Type,
                _formModel.Currency,
                _formModel.InitialBalance
            );
            _accounts = await AccountService.GetAccounts();
            _formModel = new CreateAccountFormModel { Type = AccountType.None, Currency = CurrencyType.None };
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }

    private async Task DeleteAccountAsync(Guid accountId)
    {
        try
        {
            await AccountService.DeleteAccount(accountId);
            _accounts = await AccountService.GetAccounts();
            if (selectedAccountId == accountId)
            {
                _selectedAccountIdString = null;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }

    private string _selectedAccountIdString;
    private Guid? selectedAccountId
    {
        get
        {
            if (Guid.TryParse(_selectedAccountIdString, out var guid))
                return guid;
            return null;
        }
        set => _selectedAccountIdString = value?.ToString();
    }
    private IBankAccount selectedAccount => _accounts.FirstOrDefault(a => a.Id == selectedAccountId);

    private async Task HandleTransactionAsync()
    {
        if (selectedAccount == null) return;

        var bankAccount = selectedAccount as BankAccount;
        if (bankAccount == null) return;

        try
        {
            if (_transactionModel.Type == "Deposit")
            {
                bankAccount.Deposit(_transactionModel.Amount, Guid.Empty, "Egen insättning", "Insättning");
            }
            else if (_transactionModel.Type == "Withdraw")
            {
                bankAccount.Withdraw(_transactionModel.Amount, Guid.Empty, "Eget uttag", "Uttag");
            }

            await AccountService.UpdateAccount(bankAccount);
            _accounts = await AccountService.GetAccounts();
            _transactionModel = new TransactionFormModel();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Transaction failed: {ex.Message}");
        }
    }

    private string GetAccountTypeName(AccountType type)
    {
        return type switch
        {
            AccountType.Uttag => "Privatkonto",
            AccountType.Spara => "Sparkonto",
            _ => "Okänd"
        };
    }
}
