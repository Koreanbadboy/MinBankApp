@page "/CreateAccount"
@using MinBankApp.Services
@inject IAccountService AccountService


<h3>Skapa nytt konto</h3>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync" FormName="CreateAccountForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- RUTA för kontonamn -->
    <div class="mb-2">
        <label>Kontonamn</label>
        <InputText @bind-Value="_model.Name" />
    </div>
    <div class="mb-2">

        <!-- RUTA för kontotyp -->
        <label>Kontotyp</label>
        <InputSelect @bind-Value="_model.Type">
            <option value="">Välj kontotyp!</option>

            <option value="@AccountType.Deposit">Baskonto</option>
            <option value="@AccountType.Savings">Sparkonto</option>
        </InputSelect>
    </div>

    <!-- RUTA för valuta -->
    <div class="mb-2">
        <label>Valuta</label>
        <InputSelect @bind-Value="_model.Currency">
            @foreach (var currency in Enum.GetValues<CurrencyType>())
            {
                <option value="@currency">@currency</option>
            }
        </InputSelect>
    </div>

    <!-- RUTA för Start saldo -->
    <div class="mb-2">
        <label>Start saldo</label>
        <InputNumber @bind-Value="_model.InitialBalance" />
    </div>

    <!-- Knapp för skapa -->
    <button type="submit">Skapa</button>
</EditForm>

<!--Lägg till alla konton-->

<h4>Alla konton</h4>
@if(_accounts.Count == 0)
{
    <p>Det finns inga konton ännu, registera ditt första konto!</p>
}
else
{
    <ul>
        @foreach(var account in _accounts)
        {
            <li>
                <strong>@account.Name</strong> - @account.AccountType - @account.Balance - @account.Currency
                <small>(Uppdaterad @account.LastUpdated.ToLocalTime())</small>
            </li>
        }
    </ul>
}

@code {
private CreateAccountModel _model = new();
private List<IBankAccount> _accounts = new();

protected override async Task OnInitializedAsync()
{
_model = await AccountService.LoadModelAsync();
_accounts = await AccountService.GetAccounts();
}

private async Task CreateAccountAsync()
{
try
{
var created = await AccountService.CreateAccount(
_model.Name,
_model.Type,
_model.Currency,
_model.InitialBalance
);
_accounts = await AccountService.GetAccounts();
_model.Clear();
await AccountService.SaveModelAsync(_model);
StateHasChanged();
}
catch (Exception ex)
{
Console.Error.WriteLine(ex);
}
}
}
