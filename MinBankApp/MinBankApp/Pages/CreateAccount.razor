@page "/CreateAccount"
@inject IAccountService AccountService

<h3>Vänligen skapa ett konto</h3>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
   
    <!-- RUTA för kontonamn -->
    <div class="mb-2">
        <label>Kontonamn</label>
        <InputText @bind-Value="_model.Name" />
    </div>
    <div class="mb-2">

        <!-- RUTA för kontotyp -->
        <label>Kontotyp</label>
        <InputSelect @bind-Value="_model.Type">
            <option value="">Välj kontotyp!</option>
            <option value="@AccountType.Deposit">Baskonto</option>
            <option value="@AccountType.Savings">Sparkonto</option>
        </InputSelect>
    </div>

    <!-- RUTA för valuta -->
    <div class="mb-2">
        <label>Valuta</label>
        <InputSelect @bind-Value="_model.Currency" TValue="string">
            @foreach (var currency in Enum.GetValues<CurrencyType>())
            {
                <option value="@currency.ToString()">@currency</option>
            }
        </InputSelect>
    </div>

    <!-- RUTA för Start saldo -->
    <div class="mb-2">
        <label>Start saldo</label>
        <InputNumber @bind-Value="_model.InitialBalance" />
    </div>
    
    <!-- Knapp för skapa -->
    <button type="submit">Skapa</button>
</EditForm>

<!-- Lägg till alla konton -->

<h4>Alla konton</h4>
@if (_accounts.Count == 0)
{
    <p>Det finns inga konto, registrera ditt första konto ovan.</p>
}
else
{
    <ul>
        @foreach (var account in _accounts)
        {
            <li>
                <strong>@account.Name</strong> - @account.Balance - @account.Currency
                <small>(uppdaterad @account.LastUpdated.ToLocalTime())</small>
            </li>
        }
    </ul>
}

@code {
    private CreateAccountModel _model = new();
    private List<IBankAccount> _accounts = new();

    protected override void OnInitialized()
    {
        _accounts = AccountService.GetAccounts().ToList();
        base.OnInitialized();
    }

    private Task CreateAccountAsync()
    {
        try
        {
            Console.WriteLine(_model.Name);
            
            AccountService.CreateAccount(
                _model.Name,
                _model.Type,
                _model.Currency,
                _model.InitialBalance
            );
                
            _accounts = AccountService.GetAccounts().ToList();
            _model.Clear();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        return Task.CompletedTask;
    }
    
    private class CreateAccountModel
    {
        public string Name { get; set; }
        public AccountType Type { get; set; }
        public string Currency { get; set; }
        public decimal InitialBalance { get; set; }
        private string _message;

        public void Clear()
        {
            Name = string.Empty;
            Currency = string.Empty;
            InitialBalance = 0;
            Type = default;
        }
    }
}