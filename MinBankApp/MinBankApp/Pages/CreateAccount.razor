@page "/CreateAccount"
@using MinBankApp.Services
@inject IAccountService AccountService
@inject IStorageService LocalService

<h3>Skapa nytt konto</h3>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync" FormName="CreateAccountForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- RUTA för kontonamn -->
    <div class="mb-2">
        <label>Kontonamn</label>
        <InputText @bind-Value="_model.Name" />
    </div>
    <div class="mb-2">

        <!-- RUTA för kontotyp -->
        <label>Kontotyp</label>
        <InputSelect @bind-Value="_model.Type">
            <option value="">Välj kontotyp!</option>

            <option value="@AccountType.Deposit">Baskonto</option>
            <option value="@AccountType.Savings">Sparkonto</option>
        </InputSelect>
    </div>

    <!-- RUTA för valuta -->
    <div class="mb-2">
        <label>Valuta</label>
        <InputSelect @bind-Value="_model.Currency">
            @foreach (var currency in Enum.GetValues<CurrencyType>())
            {
                <option value="@currency">@currency</option>
            }
        </InputSelect>
    </div>

    <!-- RUTA för Start saldo -->
    <div class="mb-2">
        <label>Start saldo</label>
        <InputNumber @bind-Value="_model.InitialBalance" />
    </div>

    <!-- Knapp för skapa -->
    <button type="submit">Skapa</button>
</EditForm>

<!--Lägg till alla konton-->

<h4>Alla konton</h4>
@if(_accounts.Count == 0)
{
    <p>Det finns inga konton ännu, registera ditt första konto!</p>
}
else
{
    <ul>
        @foreach(var account in _accounts)
        {
            <li>
                <strong>@account.Name</strong> - @account.AccountType - @account.Balance - @account.Currency
                <small>(Uppdaterad @account.LastUpdated.ToLocalTime())</small>
            </li>
        }
    </ul>
}

@code {
    private const string StorageKey = "Accounts";
    private CreateAccountModel _model = new();
    private List<IBankAccount> _accounts = new();

    protected override async Task OnInitializedAsync()
    {
        var savedModel = await LocalService.GetItemAsync<CreateAccountModel>("CreateAccountModel");
        if (savedModel != null)
            _model = savedModel;

        var savedAccounts = await LocalService.GetItemAsync<List<AccountStorageDto>>(StorageKey);
        if (savedAccounts != null && savedAccounts.Count > 0)
        {
            _accounts = savedAccounts
                .Select(dto => new BankAccount(dto.Name, dto.Type, dto.Currency, dto.Balance))
                .Cast<IBankAccount>()
                .ToList();
        }
        else
        {
            _accounts = await AccountService.GetAccounts();
        }
    }




    private async Task CreateAccountAsync()
    {
        // Skapa konto och spara – med felhantering
        try
        {
            Console.WriteLine(_model.Name);

            // Skapa via tjänsten för domänkonsistens
            var created = await AccountService.CreateAccount(
                _model.Name,
                _model.Type,
                _model.Currency,
                _model.InitialBalance
            );

            _accounts = await AccountService.GetAccounts();
            _model.Clear();
            StateHasChanged();

            // Spara ögonblicksbild till lagring
            var snapshot = _accounts.Select(a => new AccountStorageDto
            {
                Name = a.Name,
                Type = a.AccountType,
                Currency = a.Currency,
                Balance = a.Balance
            }).ToList();

            await LocalService.SetItemAsync(StorageKey, snapshot);
            _model.Clear();
        }
        catch (ArgumentException ex)
        {
            // Ogiltiga värden (t.ex. negativa belopp)
            Console.Error.WriteLine(ex);
        }
        catch (InvalidOperationException ex)
        {
            // Tillståndsrelaterat fel (t.ex. otillräckliga medel)
            Console.Error.WriteLine(ex);
        }
        catch (Exception ex)
        {
            // Generellt fel
            Console.Error.WriteLine(ex);
        }
    }

    private class CreateAccountModel
    {
        public string Name { get; set; }
        public AccountType Type { get; set; }
        public CurrencyType Currency { get; set; }
        public decimal InitialBalance { get; set; }

        public void Clear()
        {
            Name = string.Empty;
            Currency = CurrencyType.None;
            InitialBalance = 0;
            Type = default;
        }
    }
    public class AccountStorageDto
    {
        public string Name { get; set; } = string.Empty;
        public AccountType Type { get; set; } = AccountType.None;
        public CurrencyType Currency { get; set; } = CurrencyType.None;
        public decimal Balance { get; set; }
    }
}
