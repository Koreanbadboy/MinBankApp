@page "/NewTransaction"
@using System.Linq
@using System.ComponentModel.DataAnnotations
@using MinBankApp.Domain
@using MinBankApp.Interfaces
@inject IAccountService AccountService

<h3>Ny betalning / Överföring</h3>

@if (!_accounts.Any())
{
    <div class="alert alert-warning">
        Inga konton hittades. Skapa först ett konto på <a href="/CreateAccount">CreateAccount</a>.
    </div>
}
else
{
    <EditForm Model="_transferModel" OnValidSubmit="TransferAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Från konto -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="fromAccount" class="form-label">Från konto</label>
            <InputSelect id="fromAccount" class="form-select" style="max-width: 100%;" @bind-Value="_transferModel.FromAccountName">
                <option value="">Välj konto...</option>
                @foreach (var a in _accounts)
                {
                    var kontoTyp = a.AccountType == AccountType.Uttag ? "Privatkonto"
                        : a.AccountType == AccountType.Spara ? "Sparkonto"
                        : a.AccountType.ToString();
                    <option value="@a.Name">@a.Name (@kontoTyp) – @a.Currency</option>
                }
            </InputSelect>
        </div>

        <!-- Visa saldo för valt "Från konto" -->
        @if (SelectedFromAccount != null)
        {
            <div class="mb-3" style="max-width:400px;">
                <label class="form-label">Saldo: </label>
                <span class="fw-bold">@SelectedFromAccount.Balance @SelectedFromAccount.Currency</span>
            </div>
        }


        <!-- Till konto -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="toAccount" class="form-label">Till konto</label>
            <InputSelect id="toAccount" class="form-select" style="max-width: 100%;" @bind-Value="_transferModel.ToAccountName">
                <option value="">Välj konto...</option>
                @foreach (var a in _accounts)
                {
                    var kontoTyp = a.AccountType == AccountType.Uttag ? "Privatkonto"
                        : a.AccountType == AccountType.Spara ? "Sparkonto"
                        : a.AccountType.ToString();
                    <option value="@a.Name">@a.Name (@kontoTyp) – @a.Currency</option>
                }
            </InputSelect>
        </div>


        <!-- Belopp -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="amount" class="form-label">Belopp</label>
            <InputNumber id="amount" class="form-control" style="max-width: 100%;" @bind-Value="_transferModel.Amount" />
        </div>

        <!-- Beskrivning -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="description" class="form-label">Beskrivning</label>
            <InputText id="description" class="form-control" style="max-width: 100%;" @bind-Value="_transferModel.Description" />
        </div>

        <button type="submit" class="btn btn-success w-100" style="max-width: 400px;">Genomför överföring</button>
    </EditForm>
}

<!-- Transaktionshistorik -->
@{
    var allTransactions = _accounts
        .SelectMany(a => a.Transactions)
        .OrderByDescending(t => t.TimeStamp)
        .ToList();



}
@if (allTransactions.Any())
{
    <div class="history-box" style="border:1px solid #ccc; padding:1em; margin-top:2em; max-width:600px;">
        <h5>Transaktionshistorik</h5>
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Datum</th>
                    <th>Typ</th>
                    <th>Belopp</th>
                    <th>Konto</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var t in allTransactions)
            {
                // Bestäm typ-etikett utifrån TransactionType
                var typ = t.TransactionType == TransactionType.Withdrawal ? "Uttag"
                    : t.TransactionType == TransactionType.Deposit ? "Insättning"
                    : t.TransactionType == TransactionType.TransferOut ? "Överfört"
                    : t.TransactionType == TransactionType.TransferIn ? "Mottagit"
                    : t.TransactionType.ToString();

                // Bestäm tecken och css-klass för belopp
                var isNegative = t.TransactionType == TransactionType.Withdrawal || t.TransactionType == TransactionType.TransferOut;
                var sign = isNegative ? "-" : "+";
                var css = isNegative ? "text-danger" : "text-success";

                // Visa båda parter för tydlighet
                var parties = $"{t.FromAccountName} → {t.ToAccountName}";

                <tr>
                    <td>@t.TimeStamp.ToString("yyyy-MM-dd")</td>
                    <td>@typ</td>
                    <td class="@css">@sign@t.Amount.ToString("F2")</td>
                    <td>@parties</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}


<footer class="footer">
    <p>© 2025 MinBankApp. All rights reserved.</p>
</footer>

@code {
private List<IBankAccount> _accounts = new();
private IBankAccount? SelectedFromAccount => _accounts.FirstOrDefault(a => a.Name == _transferModel.FromAccountName);
private TransferModel _transferModel = new();
private string _errorMessage = "";
protected override async Task OnInitializedAsync()
{
_accounts = await AccountService.GetAccounts();
}
private async Task TransferAsync()
{
_errorMessage = "";
var fromAccount = SelectedFromAccount;
var toAccount = _accounts.FirstOrDefault(a => a.Name == _transferModel.ToAccountName);

if (fromAccount == null || toAccount == null)
{
_errorMessage = "Ogiltiga konton valda.";
return;
}

if (fromAccount.Id == toAccount.Id)
{
_errorMessage = "Du kan inte överföra pengar till samma konto.";
return;
}

try
{
fromAccount.Withdraw(_transferModel.Amount, toAccount.Id, toAccount.Name, _transferModel.Description);
toAccount.Deposit(_transferModel.Amount, fromAccount.Id, fromAccount.Name, _transferModel.Description);

await AccountService.UpdateAccount((BankAccount)fromAccount);
await AccountService.UpdateAccount((BankAccount)toAccount);

_accounts = await AccountService.GetAccounts();
_transferModel = new TransferModel();
StateHasChanged();
}
catch (Exception ex)
{
_errorMessage = ex.Message;
}
}

// Modell för överföring
public class TransferModel
{
[Required(ErrorMessage = "Välj ett konto att överföra från.")]
public string FromAccountName { get; set; } = "";
[Required(ErrorMessage = "Välj ett konto att överföra till.")]
public string ToAccountName { get; set; } = "";
[Range(0.01, (double)decimal.MaxValue, ErrorMessage = "Beloppet måste vara större än noll.")]
public decimal Amount { get; set; }
public string Description { get; set; } = "";
}
}
