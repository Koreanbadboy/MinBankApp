@page "/NewTransaction"
@using System.Linq
@using MinBankApp.Domain
@using MinBankApp.Interfaces
@inject ITransactionService TransactionService
@inject IAccountService AccountService

<h3>Ny betalning / Överföring</h3>

@if (!_accounts.Any())
{
    <div class="alert alert-warning">
        Inga konton hittades. Skapa först ett konto på <a href="/CreateAccount">CreateAccount</a>.
    </div>
}
else
{
    <EditForm Model="_transferModel" OnValidSubmit="TransferAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Från konto -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="fromAccount" class="form-label">Från konto</label>
            <InputSelect id="fromAccount" class="form-select" style="max-width: 100%;" @bind-Value="_transferModel.FromAccountName">
                <option value="">Välj konto...</option>
                @foreach (var a in _accounts)
                {
                    var kontoTyp = a.AccountType == AccountType.Uttag ? "Privatkonto"
                        : a.AccountType == AccountType.Spara ? "Sparkonto"
                        : a.AccountType.ToString();
                    <option value="@a.Name">@a.Name (@kontoTyp) – @a.Currency</option>
                }
            </InputSelect>
        </div>


        <!-- Till konto -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="toAccount" class="form-label">Till konto</label>
            <InputSelect id="toAccount" class="form-select" style="max-width: 100%;" @bind-Value="_transferModel.ToAccountName">
                <option value="">Välj konto...</option>
                @foreach (var a in _accounts)
                {
                    var kontoTyp = a.AccountType == AccountType.Uttag ? "Privatkonto"
                        : a.AccountType == AccountType.Spara ? "Sparkonto"
                        : a.AccountType.ToString();
                    <option value="@a.Name">@a.Name (@kontoTyp) – @a.Currency</option>
                }
            </InputSelect>
        </div>


        <!-- Belopp -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="amount" class="form-label">Belopp</label>
            <InputNumber id="amount" class="form-control" style="max-width: 100%;" @bind-Value="_transferModel.Amount" />
        </div>

        <!-- Beskrivning -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="description" class="form-label">Beskrivning</label>
            <InputText id="description" class="form-control" style="max-width: 100%;" @bind-Value="_transferModel.Description" />
        </div>

        <button type="submit" class="btn btn-success w-100" style="max-width: 400px;">Genomför överföring</button>
    </EditForm>
}

<!-- Transaktionshistorik -->
@if (_transactions.Any())
{
    <div class="history-box" style="border:1px solid #ccc; padding:1em; margin-top:2em;">
        <h5>Transaktionshistorik</h5>
        <ul>
            @foreach (var t in _transactions.Where(x => x.Amount > 0))
            {
                var account = _accounts.FirstOrDefault(a => a.Name == t.AccountName);
                <li>
                    @t.Date.ToShortDateString() – <strong>@t.AccountName</strong> – mottagit – @t.Amount @account?.Currency – @t.Description
                </li>
            }
        </ul>
    </div>
}

@code {
    // List of accounts
    private List<IBankAccount> _accounts = new();

    // Model for transfer form
    private TransferModel _transferModel = new();

    // List of transactions
    private List<Transaction> _transactions = new();

    // Load accounts and transactions on page load
    protected override async Task OnInitializedAsync()
    {
        // Fetch accounts asynchronously
        _accounts = await AccountService.GetAccounts() ?? new List<IBankAccount>();

        // Fetch saved transactions
        _transactions = await TransactionService.GetAllAsync();
    }

    // Genomför överföring mellan konton
    private async Task TransferAsync()
    {
        await TransactionService.TransferAsync(
            _transferModel.FromAccountName,
            _transferModel.ToAccountName,
            _transferModel.Amount,
            _transferModel.Description
        );
        _transactions = await TransactionService.GetAllAsync();
        _transferModel = new TransferModel(); // reset form
    }


    // Modell för överföring
    public class TransferModel
    {
        public string FromAccountName { get; set; }
        public string ToAccountName { get; set; }
        public decimal Amount { get; set; }
        public string Description { get; set; }
    }
}
